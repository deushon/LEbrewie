#!/usr/bin/env python

"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
—Å –∫–∞–∂–¥–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –∏ –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π.
"""

import sys
import time
import statistics
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º lerobot
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from lerobot.robots.brewie.config_Brewie import BrewieConfig
from lerobot.robots.brewie.Brewie_base import BrewieBase

def measure_observation_performance(robot, num_samples=100):
    """–ò–∑–º–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π."""
    
    print(f"–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π...")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {num_samples}")
    print()
    
    times = []
    
    for i in range(num_samples):
        start_time = time.perf_counter()
        obs = robot.get_observation()
        end_time = time.perf_counter()
        
        dt_ms = (end_time - start_time) * 1000
        times.append(dt_ms)
        
        if i % 10 == 0:
            print(f"–û–±—Ä–∞–∑–µ—Ü {i+1}/{num_samples}: {dt_ms:.1f}ms")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    mean_time = statistics.mean(times)
    median_time = statistics.median(times)
    min_time = min(times)
    max_time = max(times)
    std_time = statistics.stdev(times) if len(times) > 1 else 0
    
    print()
    print("=" * 50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ó–ú–ï–†–ï–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {mean_time:.1f}ms")
    print(f"–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {median_time:.1f}ms")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_time:.1f}ms")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.1f}ms")
    print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_time:.1f}ms")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ FPS
    print("–ê–ù–ê–õ–ò–ó FPS:")
    print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π FPS (—Å—Ä–µ–¥–Ω–∏–π): {1000/mean_time:.1f}")
    print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π FPS (–º–µ–¥–∏–∞–Ω–Ω—ã–π): {1000/median_time:.1f}")
    print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π FPS (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π): {1000/max_time:.1f}")
    print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π FPS (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π): {1000/min_time:.1f}")
    print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if mean_time > 33.33:  # –ë–æ–ª—å—à–µ 30 FPS
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç 33.33ms")
        print("   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π FPS –±—É–¥–µ—Ç –Ω–∏–∂–µ 30")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø–∏—Å–∏")
        
        recommended_fps = int(1000 / mean_time)
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∑–∞–ø–∏—Å–∏: {recommended_fps} FPS")
    else:
        print("‚úÖ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
        print(f"   –ú–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø–∏—Å–∏ –¥–æ {int(1000/mean_time)} FPS")
    
    return {
        'mean_time': mean_time,
        'median_time': median_time,
        'min_time': min_time,
        'max_time': max_time,
        'std_time': std_time,
        'actual_fps': 1000/mean_time
    }

def test_individual_sensors(robot):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤."""
    
    print("=" * 50)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–î–ï–õ–¨–ù–´–• –î–ê–¢–ß–ò–ö–û–í")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –º–æ—Ç–æ—Ä–æ–≤
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤...")
    motor_times = []
    for i in range(20):
        start = time.perf_counter()
        obs = robot.get_observation()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –º–æ—Ç–æ—Ä–æ–≤
        motor_data = {k: v for k, v in obs.items() if k.endswith('.pos')}
        end = time.perf_counter()
        motor_times.append((end - start) * 1000)
    
    print(f"–ú–æ—Ç–æ—Ä—ã: {statistics.mean(motor_times):.1f}ms ¬± {statistics.stdev(motor_times):.1f}ms")
    
    # –¢–µ—Å—Ç –¥–∂–æ–π—Å—Ç–∏–∫–∞
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞...")
    joy_times = []
    for i in range(20):
        start = time.perf_counter()
        obs = robot.get_observation()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞
        joy_data = {k: v for k, v in obs.items() if k.startswith('joystick.')}
        end = time.perf_counter()
        joy_times.append((end - start) * 1000)
    
    print(f"–î–∂–æ–π—Å—Ç–∏–∫: {statistics.mean(joy_times):.1f}ms ¬± {statistics.stdev(joy_times):.1f}ms")
    
    # –¢–µ—Å—Ç IMU
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IMU...")
    imu_times = []
    for i in range(20):
        start = time.perf_counter()
        obs = robot.get_observation()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ IMU
        imu_data = {k: v for k, v in obs.items() if k.startswith('imu.')}
        end = time.perf_counter()
        imu_times.append((end - start) * 1000)
    
    print(f"IMU: {statistics.mean(imu_times):.1f}ms ¬± {statistics.stdev(imu_times):.1f}ms")
    
    # –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã...")
    camera_times = []
    for i in range(20):
        start = time.perf_counter()
        obs = robot.get_observation()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã
        camera_data = {k: v for k, v in obs.items() if k == 'camera'}
        end = time.perf_counter()
        camera_times.append((end - start) * 1000)
    
    print(f"–ö–∞–º–µ—Ä–∞: {statistics.mean(camera_times):.1f}ms ¬± {statistics.stdev(camera_times):.1f}ms")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    
    print("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–æ–±–æ—Ç–∞ Brewie")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ROS master –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–æ–±–æ—Ç–∞
    config = BrewieConfig(
        master_ip="192.168.20.21",
        master_port=9090,
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ–±–æ—Ç–∞
    robot = BrewieBase(config)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–æ–±–æ—Ç—É
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–æ–±–æ—Ç—É...")
        robot.connect()
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏
        test_individual_sensors(robot)
        print()
        
        # –ò–∑–º–µ—Ä—è–µ–º –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        results = measure_observation_performance(robot, num_samples=50)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print()
        print("–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if results['actual_fps'] < 20:
            print("üî¥ –ö–†–ò–¢–ò–ß–ù–û: –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ROS")
            print("   - –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç—á–∏–∫–æ–≤")
            print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø–∏—Å–∏ 10-15 FPS")
        elif results['actual_fps'] < 25:
            print("üü° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø–∏—Å–∏ 20-25 FPS")
        else:
            print("üü¢ –•–û–†–û–®–û: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
            print("   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø–∏—Å–∏ 30 FPS")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Ä–æ–±–æ—Ç–∞
        try:
            robot.disconnect()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {e}")
    
    return True

if __name__ == "__main__":
    main()
